; (test
;  (name test_macho_arm64)
;  (deps hello_world)
;  (build_if
;   (and
;    (= %{system} "macosx")
;    (= %{architecture} "arm64")))
;  (libraries object integers alcotest cmdliner)
;  (action
;   (run %{exe:test_macho_arm64.exe} --binary %{dep:hello_world})))

; Generate source-level debug information with dwarf version 5

(rule
 (alias runtest)
 (deps hello_world.c)
 (targets hello_world hello_world.dSYM)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (system "cc -gdwarf-5 %{deps} -o hello_world")))

(rule
 (alias runtest)
 (deps hello_world.cpp)
 (targets hello_world_cpp hello_world_cpp.dSYM)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (system "clang++ -std=c++17 -gdwarf-5 %{deps} -o hello_world_cpp")))

; Compile test program with macro debugging information

(rule
 (alias runtest)
 (deps test_macros.c test_macros_header.h)
 (targets test_macros)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (system "gcc -gdwarf-5 test_macros.c -o test_macros")))

(test
 (name test_line_program_header)
 (deps hello_world hello_world_cpp example/unity_cpp)
 (libraries durin object alcotest cmdliner)
 (build_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (run %{exe:test_line_program_header.exe} --binary %{dep:hello_world})))

(test
 (name test_debug_str_offsets)
 (libraries durin object alcotest cmdliner)
 (build_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (run %{exe:test_debug_str_offsets.exe})))

(test
 (name test_djb2)
 (libraries durin alcotest)
 (action
  (run %{exe:test_djb2.exe})))

(test
 (name test_debug_names_parsing)
 (libraries durin alcotest)
 (action
  (run %{exe:test_debug_names_parsing.exe})))

; Cram test to compare our dwarfdump with real dwarfdump

(cram
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (deps %{bin:dwarfdump} hello_world))

; Cram test for objdump functionality

(cram
 (deps %{bin:objdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64"))))

; Test rules to compare --debug-str output with system dwarfdump

; Generate output from our dwarfdump --debug-str

(rule
 (alias runtest)
 (target ocaml_debug_str.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-str
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Generate output from system dwarfdump --debug-str

(rule
 (alias runtest)
 (target system_debug_str.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-str hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_str.out system_debug_str.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_str.out ocaml_debug_str.out)))

; Test rules to compare --debug-str-offsets output with system dwarfdump

; Generate output from our dwarfdump --debug-str-offsets

(rule
 (alias runtest)
 (target ocaml_debug_str_offsets.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-str-offsets
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Generate output from system dwarfdump --debug-str-offsets

(rule
 (alias runtest)
 (target system_debug_str_offsets.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-str-offsets hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_str_offsets.out system_debug_str_offsets.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_str_offsets.out ocaml_debug_str_offsets.out)))

; Test rules to compare --debug-abbrev output with system dwarfdump

; Generate output from our dwarfdump --debug-abbrev

(rule
 (alias runtest)
 (target ocaml_debug_abbrev.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-abbrev
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Generate output from system dwarfdump --debug-abbrev

(rule
 (alias runtest)
 (target system_debug_abbrev.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-abbrev hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_abbrev.out system_debug_abbrev.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_abbrev.out ocaml_debug_abbrev.out)))

; Test rules to compare --debug-info output with system dwarfdump

; Generate output from our dwarfdump --debug-info

(rule
 (alias runtest)
 (target ocaml_debug_info.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-info
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Generate output from system dwarfdump --debug-info

(rule
 (alias runtest)
 (target system_debug_info.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-info hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_info.out system_debug_info.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_info.out ocaml_debug_info.out)))

; Test rules to compare --debug-addr output with system dwarfdump

; Generate output from our dwarfdump --debug-addr

(rule
 (alias runtest)
 (target ocaml_debug_addr.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-addr
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Generate output from system dwarfdump --debug-addr

(rule
 (alias runtest)
 (target system_debug_addr.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-addr hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_addr.out system_debug_addr.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_addr.out ocaml_debug_addr.out)))

; Test rules to compare --debug-line output with system dwarfdump

; Generate output from our dwarfdump --debug-line

(rule
 (alias runtest)
 (target ocaml_debug_line.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-line
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Generate output from system dwarfdump --debug-line

(rule
 (alias runtest)
 (target system_debug_line.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-line hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_line.out system_debug_line.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_line.out ocaml_debug_line.out)))

; Test rules to compare --debug-names output with system dwarfdump

; Generate output from our dwarfdump --debug-names

(rule
 (alias runtest)
 (target ocaml_debug_names.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-names
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Generate output from system dwarfdump --debug-names

(rule
 (alias runtest)
 (target system_debug_names.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-names hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_names.out system_debug_names.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_names.out ocaml_debug_names.out)))

; Test rules to compare --debug-names output with system dwarfdump for C++ file

; Generate output from our dwarfdump --debug-names for C++ file

(rule
 (alias runtest)
 (target ocaml_debug_names_cpp.out)
 (deps %{bin:dwarfdump} hello_world_cpp)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-names
    "hello_world_cpp.dSYM/Contents/Resources/DWARF/hello_world_cpp"))))

; Generate output from system dwarfdump --debug-names for C++ file

(rule
 (alias runtest)
 (target system_debug_names_cpp.out)
 (deps hello_world_cpp)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-names hello_world_cpp.dSYM/Contents/Resources/DWARF/hello_world_cpp"))))

; Compare the C++ outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_names_cpp.out system_debug_names_cpp.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_names_cpp.out ocaml_debug_names_cpp.out)))

; Test rules to compare --debug-macro output with system dwarfdump

; Generate output from our dwarfdump --debug-macro

(rule
 (alias runtest)
 (target ocaml_debug_macro.out)
 (deps %{bin:dwarfdump} test_macros)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:dwarfdump} --debug-macro "test_macros"))))

; Generate output from system dwarfdump --debug-macro

(rule
 (alias runtest)
 (target system_debug_macro.out)
 (deps test_macros)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "dwarfdump --debug-macro test_macros"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_macro.out system_debug_macro.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (diff system_debug_macro.out ocaml_debug_macro.out)))

; Test rules to compare our objdump --unwind-info output with system objdump --unwind-info

; Generate output from our objdump --unwind-info for hello_world

(rule
 (alias runtest)
 (target ocaml_unwind_info.out)
 (deps %{bin:objdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:objdump} --unwind-info "hello_world"))))

; Generate output from system objdump --unwind-info for hello_world

(rule
 (alias runtest)
 (target system_unwind_info.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system "objdump --unwind-info hello_world"))))

; Generate output from our objdump --unwind-info for hello_world_cpp

(rule
 (alias runtest)
 (target ocaml_unwind_info_cpp.out)
 (deps %{bin:objdump} hello_world_cpp)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:objdump} --unwind-info "hello_world_cpp"))))

; Generate output from system objdump --unwind-info for hello_world_cpp

(rule
 (alias runtest)
 (target system_unwind_info_cpp.out)
 (deps hello_world_cpp)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system "objdump --unwind-info hello_world_cpp"))))

; Compare the unwind info outputs using diff for hello_world

(rule
 (alias runtest)
 (deps ocaml_unwind_info.out system_unwind_info.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_unwind_info.out ocaml_unwind_info.out)))

; Compare the unwind info outputs using diff for hello_world_cpp

(rule
 (alias runtest)
 (deps ocaml_unwind_info_cpp.out system_unwind_info_cpp.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_unwind_info_cpp.out ocaml_unwind_info_cpp.out)))

; Test rules to compare --debug-line-str output with system dwarfdump

; Generate output from our dwarfdump --debug-line-str

(rule
 (alias runtest)
 (target ocaml_debug_line_str.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-line-str
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Generate output from system dwarfdump --debug-line-str

(rule
 (alias runtest)
 (target system_debug_line_str.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-line-str hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_line_str.out system_debug_line_str.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_line_str.out ocaml_debug_line_str.out)))

; Test rules to compare --debug-aranges output with system dwarfdump

; Generate output from our dwarfdump --debug-aranges

(rule
 (alias runtest)
 (target ocaml_debug_aranges.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-aranges
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Generate output from system dwarfdump --debug-aranges

(rule
 (alias runtest)
 (target system_debug_aranges.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-aranges hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_aranges.out system_debug_aranges.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_aranges.out ocaml_debug_aranges.out)))

; Test rules to compare --debug-loclists output with system dwarfdump

; Generate output from our dwarfdump --debug-loclists

(rule
 (alias runtest)
 (target ocaml_debug_loclists.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-loclists
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Generate output from system dwarfdump --debug-loclists

(rule
 (alias runtest)
 (target system_debug_loclists.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-loclists hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

; Compare the outputs using diff

(rule
 (alias runtest)
 (deps ocaml_debug_loclists.out system_debug_loclists.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_loclists.out ocaml_debug_loclists.out)))

; Test error handling when passing a directory instead of a file

(rule
 (alias runtest)
 (target directory_error_test.out)
 (deps %{bin:dwarfdump})
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stderr-to
   %{target}
   (system "%{bin:dwarfdump} --debug-loclists . || true"))))