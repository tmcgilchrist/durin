; =============================================================================
; UNIT TESTS
; =============================================================================

(test
 (name test_line_program_header)
 (deps hello_world hello_world_cpp example/unity_cpp)
 (libraries durin object alcotest cmdliner)
 (build_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (run %{exe:test_line_program_header.exe} --binary %{dep:hello_world})))

(test
 (name test_debug_str_offsets)
 (libraries durin object alcotest cmdliner)
 (action
  (run %{exe:test_debug_str_offsets.exe})))

(test
 (name test_djb2)
 (libraries durin alcotest)
 (action
  (run %{exe:test_djb2.exe})))

(test
 (name test_debug_names_parsing)
 (libraries durin alcotest)
 (action
  (run %{exe:test_debug_names_parsing.exe})))

(test
 (name test_dwarf_expression)
 (libraries durin alcotest)
 (action
  (run %{exe:test_dwarf_expression.exe})))

; =============================================================================
; MACOS PLATFORM TESTS
; =============================================================================

; macOS Binary Compilation Rules

(rule
 (alias runtest)
 (deps hello_world.c)
 (targets hello_world hello_world.dSYM)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (system "cc -gdwarf-5 %{deps} -o hello_world")))

(rule
 (alias runtest)
 (deps hello_world.cpp)
 (targets hello_world_cpp hello_world_cpp.dSYM)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (system "clang++ -std=c++17 -gdwarf-5 %{deps} -o hello_world_cpp")))

; macOS Cram Tests

(cram
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (deps %{bin:dwarfdump}))

(cram
 (deps %{bin:objdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64"))))

; =============================================================================
; DWARFDUMP COMPARISON TESTS - MACOS
; =============================================================================

; --debug-str comparison

(rule
 (alias runtest)
 (target ocaml_debug_str.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-str
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (target system_debug_str.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-str hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (deps ocaml_debug_str.out system_debug_str.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_str.out ocaml_debug_str.out)))

; --debug-str-offsets comparison

(rule
 (alias runtest)
 (target ocaml_debug_str_offsets.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-str-offsets
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (target system_debug_str_offsets.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-str-offsets hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (deps ocaml_debug_str_offsets.out system_debug_str_offsets.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_str_offsets.out ocaml_debug_str_offsets.out)))

; --debug-abbrev comparison

(rule
 (alias runtest)
 (target ocaml_debug_abbrev.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-abbrev
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (target system_debug_abbrev.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-abbrev hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (deps ocaml_debug_abbrev.out system_debug_abbrev.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_abbrev.out ocaml_debug_abbrev.out)))

; --debug-info comparison

(rule
 (alias runtest)
 (target ocaml_debug_info.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-info
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (target system_debug_info.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-info hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (deps ocaml_debug_info.out system_debug_info.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_info.out ocaml_debug_info.out)))

; --debug-addr comparison

(rule
 (alias runtest)
 (target ocaml_debug_addr.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-addr
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (target system_debug_addr.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-addr hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (deps ocaml_debug_addr.out system_debug_addr.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_addr.out ocaml_debug_addr.out)))

; --debug-line comparison

(rule
 (alias runtest)
 (target ocaml_debug_line.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-line
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (target system_debug_line.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-line hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (deps ocaml_debug_line.out system_debug_line.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_line.out ocaml_debug_line.out)))

; --debug-names comparison (C file)

(rule
 (alias runtest)
 (target ocaml_debug_names.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-names
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (target system_debug_names.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-names hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (deps ocaml_debug_names.out system_debug_names.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_names.out ocaml_debug_names.out)))

; --debug-names comparison (C++ file)

(rule
 (alias runtest)
 (target ocaml_debug_names_cpp.out)
 (deps %{bin:dwarfdump} hello_world_cpp)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-names
    "hello_world_cpp.dSYM/Contents/Resources/DWARF/hello_world_cpp"))))

(rule
 (alias runtest)
 (target system_debug_names_cpp.out)
 (deps hello_world_cpp)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-names hello_world_cpp.dSYM/Contents/Resources/DWARF/hello_world_cpp"))))

(rule
 (alias runtest)
 (deps ocaml_debug_names_cpp.out system_debug_names_cpp.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_names_cpp.out ocaml_debug_names_cpp.out)))

; --debug-macro comparison

(rule
 (alias runtest)
 (target ocaml_debug_macro.out)
 (deps %{bin:dwarfdump} test_macros)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-macro
    "hello_world_cpp.dSYM/Contents/Resources/DWARF/hello_world_cpp"))))

(rule
 (alias runtest)
 (target system_debug_macro.out)
 (deps test_macros)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-macro hello_world_cpp.dSYM/Contents/Resources/DWARF/hello_world_cpp"))))

(rule
 (alias runtest)
 (deps ocaml_debug_macro.out system_debug_macro.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_macro.out ocaml_debug_macro.out)))

; =============================================================================
; OBJDUMP COMPARISON TESTS - MACOS
; =============================================================================

; --unwind-info comparison (hello_world)

(rule
 (alias runtest)
 (target ocaml_unwind_info.out)
 (deps %{bin:objdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:objdump} --unwind-info "hello_world"))))

(rule
 (alias runtest)
 (target system_unwind_info.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system "objdump --unwind-info hello_world"))))

; --unwind-info comparison (hello_world_cpp)

(rule
 (alias runtest)
 (target ocaml_unwind_info_cpp.out)
 (deps %{bin:objdump} hello_world_cpp)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:objdump} --unwind-info "hello_world_cpp"))))

(rule
 (alias runtest)
 (target system_unwind_info_cpp.out)
 (deps hello_world_cpp)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system "objdump --unwind-info hello_world_cpp"))))

; Diff comparisons for unwind-info

(rule
 (alias runtest)
 (deps ocaml_unwind_info.out system_unwind_info.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_unwind_info.out ocaml_unwind_info.out)))

(rule
 (alias runtest)
 (deps ocaml_unwind_info_cpp.out system_unwind_info_cpp.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_unwind_info_cpp.out ocaml_unwind_info_cpp.out)))

; --debug-line-str comparison

(rule
 (alias runtest)
 (target ocaml_debug_line_str.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-line-str
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (target system_debug_line_str.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-line-str hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (deps ocaml_debug_line_str.out system_debug_line_str.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_line_str.out ocaml_debug_line_str.out)))

; --debug-aranges comparison

(rule
 (alias runtest)
 (target ocaml_debug_aranges.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-aranges
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (target system_debug_aranges.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-aranges hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (deps ocaml_debug_aranges.out system_debug_aranges.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_aranges.out ocaml_debug_aranges.out)))

; --debug-loclists comparison

(rule
 (alias runtest)
 (target ocaml_debug_loclists.out)
 (deps %{bin:dwarfdump} hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (run
    %{bin:dwarfdump}
    --debug-loclists
    "hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (target system_debug_loclists.out)
 (deps hello_world)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "dwarfdump --debug-loclists hello_world.dSYM/Contents/Resources/DWARF/hello_world"))))

(rule
 (alias runtest)
 (deps ocaml_debug_loclists.out system_debug_loclists.out)
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (diff system_debug_loclists.out ocaml_debug_loclists.out)))

; Error handling test for directory input

(rule
 (alias runtest)
 (target directory_error_test.out)
 (deps %{bin:dwarfdump})
 (enabled_if
  (and
   (= %{system} "macosx")
   (= %{architecture} "arm64")))
 (action
  (with-stderr-to
   %{target}
   (system "%{bin:dwarfdump} --debug-loclists . || true"))))

; =============================================================================
; LINUX PLATFORM TESTS
; =============================================================================

; Linux Binary Compilation

(rule
 (alias runtest)
 (deps hello_world.c)
 (targets hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (system "gcc -gdwarf-5 %{deps} -o hello_world_linux")))

(rule
 (alias runtest)
 (deps hello_world.cpp)
 (targets hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (system "clang++ -std=c++17 -gdwarf-5 %{deps} -o hello_world_cpp_linux")))

; =============================================================================
; GNU-DWARFDUMP COMPARISON TESTS - LINUX
; =============================================================================

; --debug-line comparison

(rule
 (alias runtest)
 (target ocaml_dwarfdump_line.out)
 (deps %{bin:gnu-dwarfdump} hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --debug-line hello_world_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_line.out)
 (deps hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "dwarfdump --print-lines hello_world_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_line.out system_dwarfdump_line.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (diff system_dwarfdump_line.out ocaml_dwarfdump_line.out)))

; --debug-info comparison

(rule
 (alias runtest)
 (target ocaml_dwarfdump_info.out)
 (deps %{bin:gnu-dwarfdump} hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --debug-info hello_world_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_info.out)
 (deps hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "dwarfdump --print-info hello_world_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_info.out system_dwarfdump_info.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (diff system_dwarfdump_info.out ocaml_dwarfdump_info.out)))

; --debug-str comparison

(rule
 (alias runtest)
 (target ocaml_dwarfdump_str.out)
 (deps %{bin:gnu-dwarfdump} hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --debug-str hello_world_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_str.out)
 (deps hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "dwarfdump --print-strings hello_world_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_str.out system_dwarfdump_str.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (diff system_dwarfdump_str.out ocaml_dwarfdump_str.out)))

; --debug-str comparison (C++ binary)

(rule
 (alias runtest)
 (target ocaml_dwarfdump_str_cpp.out)
 (deps %{bin:gnu-dwarfdump} hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --debug-str hello_world_cpp_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_str_cpp.out)
 (deps hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "dwarfdump --print-strings hello_world_cpp_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_str_cpp.out system_dwarfdump_str_cpp.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (diff system_dwarfdump_str_cpp.out ocaml_dwarfdump_str_cpp.out)))

; --debug-str-offsets comparison

(rule
 (alias runtest)
 (target ocaml_dwarfdump_str_offsets.out)
 (deps %{bin:gnu-dwarfdump} hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --debug-str-offsets hello_world_cpp_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_str_offsets.out)
 (deps hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "dwarfdump --print-str-offsets hello_world_cpp_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_str_offsets.out system_dwarfdump_str_offsets.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (diff system_dwarfdump_str_offsets.out ocaml_dwarfdump_str_offsets.out)))

; --debug-abbrev comparison

(rule
 (alias runtest)
 (target ocaml_dwarfdump_abbrev.out)
 (deps %{bin:gnu-dwarfdump} hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --debug-abbrev hello_world_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_abbrev.out)
 (deps hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "dwarfdump -b hello_world_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_abbrev.out system_dwarfdump_abbrev.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (diff system_dwarfdump_abbrev.out ocaml_dwarfdump_abbrev.out)))

; --debug-names comparison
; TODO: Find or create a program that generates .debug_names section
; .debug_names is a DWARF 5 accelerated name lookup table that requires
; specific compiler flags and optimization levels to be generated.
; Need example program with: complex symbol table, multiple compilation units,
; or built with -gdwarf-5 -O2 and linker that generates name acceleration.

; (rule
;  (alias runtest)
;  (target ocaml_dwarfdump_names.out)
;  (deps %{bin:gnu-dwarfdump} hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-stdout-to
;    %{target}
;    (run %{bin:gnu-dwarfdump} --debug-names hello_world_linux))))

; (rule
;  (alias runtest)
;  (target system_dwarfdump_names.out)
;  (deps hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-stdout-to
;    %{target}
;    (system "dwarfdump --print-debug-names hello_world_linux"))))

; (rule
;  (alias runtest)
;  (deps ocaml_dwarfdump_names.out system_dwarfdump_names.out)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (diff system_dwarfdump_names.out ocaml_dwarfdump_names.out)))

; --debug-names comparison (C++ file)
; TODO: Same as above - need program that generates .debug_names section

; (rule
;  (alias runtest)
;  (target ocaml_dwarfdump_names_cpp.out)
;  (deps %{bin:gnu-dwarfdump} hello_world_cpp_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-stdout-to
;    %{target}
;    (run %{bin:gnu-dwarfdump} --debug-names hello_world_cpp_linux))))

; (rule
;  (alias runtest)
;  (target system_dwarfdump_names_cpp.out)
;  (deps hello_world_cpp_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-stdout-to
;    %{target}
;    (system "dwarfdump --print-debug-names hello_world_cpp_linux"))))

; (rule
;  (alias runtest)
;  (deps ocaml_dwarfdump_names_cpp.out system_dwarfdump_names_cpp.out)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (diff system_dwarfdump_names_cpp.out ocaml_dwarfdump_names_cpp.out)))

; --debug-macro comparison
; TODO: Find or create a program that generates .debug_macro section
; .debug_macro contains macro definition information from preprocessor.
; Need example program with: #define macros, #include with macro usage,
; built with -gdwarf-5 -g3 to include macro information.

; (rule
;  (alias runtest)
;  (target ocaml_dwarfdump_macro.out)
;  (deps %{bin:gnu-dwarfdump} hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-stdout-to
;    %{target}
;    (run %{bin:gnu-dwarfdump} --debug-macro hello_world_linux))))

; (rule
;  (alias runtest)
;  (target system_dwarfdump_macro.out)
;  (deps hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-stdout-to
;    %{target}
;    (system "dwarfdump -m hello_world_linux"))))

; (rule
;  (alias runtest)
;  (deps ocaml_dwarfdump_macro.out system_dwarfdump_macro.out)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (diff system_dwarfdump_macro.out ocaml_dwarfdump_macro.out)))

; --debug-line-str comparison
; NOTE: System dwarfdump does not have a specific flag for .debug_line_str section
; The -l flag outputs .debug_line (line number program), not .debug_line_str (line string table)

; (rule
;  (alias runtest)
;  (target ocaml_dwarfdump_line_str.out)
;  (deps %{bin:gnu-dwarfdump} hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-stdout-to
;    %{target}
;    (run %{bin:gnu-dwarfdump} --debug-line-str hello_world_linux))))

; (rule
;  (alias runtest)
;  (target system_dwarfdump_line_str.out)
;  (deps hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-stdout-to
;    %{target}
;    (system "dwarfdump -l hello_world_linux"))))

; (rule
;  (alias runtest)
;  (deps ocaml_dwarfdump_line_str.out system_dwarfdump_line_str.out)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (diff system_dwarfdump_line_str.out ocaml_dwarfdump_line_str.out)))

; --debug-aranges comparison

(rule
 (alias runtest)
 (target ocaml_dwarfdump_aranges.out)
 (deps %{bin:gnu-dwarfdump} hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --debug-aranges hello_world_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_aranges.out)
 (deps hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "dwarfdump -r hello_world_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_aranges.out system_dwarfdump_aranges.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (diff system_dwarfdump_aranges.out ocaml_dwarfdump_aranges.out)))

; --debug-loclists comparison
; TODO: Find or create a program that generates .debug_loclists section
; .debug_loclists contains location list information for variables with
; complex lifetime/scope. Need example program with: optimized code,
; variables that move between registers/memory, built with -gdwarf-5 -O2.

; (rule
;  (alias runtest)
;  (target ocaml_dwarfdump_loclists.out)
;  (deps %{bin:gnu-dwarfdump} hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-stdout-to
;    %{target}
;    (run %{bin:gnu-dwarfdump} --debug-loclists hello_world_linux))))

; (rule
;  (alias runtest)
;  (target system_dwarfdump_loclists.out)
;  (deps hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-stdout-to
;    %{target}
;    (system "dwarfdump -c hello_world_linux"))))

; (rule
;  (alias runtest)
;  (deps ocaml_dwarfdump_loclists.out system_dwarfdump_loclists.out)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (diff system_dwarfdump_loclists.out ocaml_dwarfdump_loclists.out)))

; --debug-addr comparison

(rule
 (alias runtest)
 (target ocaml_dwarfdump_addr.out)
 (deps %{bin:gnu-dwarfdump} hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --debug-addr hello_world_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_addr.out)
 (deps hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "llvm-dwarfdump --debug-addr hello_world_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_addr.out system_dwarfdump_addr.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (diff system_dwarfdump_addr.out ocaml_dwarfdump_addr.out)))

; --debug-addr comparison (C++ file)

(rule
 (alias runtest)
 (target ocaml_dwarfdump_addr_cpp.out)
 (deps %{bin:gnu-dwarfdump} hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --debug-addr hello_world_cpp_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_addr_cpp.out)
 (deps hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "llvm-dwarfdump --debug-addr hello_world_cpp_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_addr_cpp.out system_dwarfdump_addr_cpp.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (diff system_dwarfdump_addr_cpp.out ocaml_dwarfdump_addr_cpp.out)))

; --eh-frame comparison

(rule
 (alias runtest)
 (target ocaml_dwarfdump_eh_frame.out)
 (deps %{bin:gnu-dwarfdump} hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --eh-frame hello_world_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_eh_frame.out)
 (deps hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "dwarfdump -F hello_world_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_eh_frame.out system_dwarfdump_eh_frame.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (progn
   (run bash -c "grep -q '.eh_frame' ocaml_dwarfdump_eh_frame.out || exit 1")
   (run bash -c "grep -q 'fde:' ocaml_dwarfdump_eh_frame.out || exit 1")
   (run bash -c "grep -q 'cie:' ocaml_dwarfdump_eh_frame.out || exit 1")
   (run bash -c "grep -q 'cfa=' ocaml_dwarfdump_eh_frame.out || exit 1"))))

; --eh-frame comparison (C++ file)

(rule
 (alias runtest)
 (target ocaml_dwarfdump_eh_frame_cpp.out)
 (deps %{bin:gnu-dwarfdump} hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --eh-frame hello_world_cpp_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_eh_frame_cpp.out)
 (deps hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system "dwarfdump -F hello_world_cpp_linux"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_eh_frame_cpp.out system_dwarfdump_eh_frame_cpp.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (progn
   (run
    bash
    -c
    "grep -q '.eh_frame' ocaml_dwarfdump_eh_frame_cpp.out || exit 1")
   (run bash -c "grep -q 'fde:' ocaml_dwarfdump_eh_frame_cpp.out || exit 1")
   (run bash -c "grep -q 'cie:' ocaml_dwarfdump_eh_frame_cpp.out || exit 1")
   (run bash -c "grep -q 'cfa=' ocaml_dwarfdump_eh_frame_cpp.out || exit 1"))))

; --eh-frame-hdr comparison

(rule
 (alias runtest)
 (target ocaml_dwarfdump_eh_frame_hdr.out)
 (deps %{bin:gnu-dwarfdump} hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --eh-frame-hdr hello_world_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_eh_frame_hdr.out)
 (deps hello_world_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "echo '.eh_frame_hdr'; echo; echo 'Reference: hex dump from readelf -x .eh_frame_hdr'; readelf -x .eh_frame_hdr hello_world_linux 2>/dev/null | tail -n +3 || echo 'No .eh_frame_hdr section found'"))))

(rule
 (alias runtest)
 (deps ocaml_dwarfdump_eh_frame_hdr.out system_dwarfdump_eh_frame_hdr.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (progn
   (run
    bash
    -c
    "grep -q '.eh_frame_hdr' ocaml_dwarfdump_eh_frame_hdr.out || exit 1")
   (run bash -c "test -s ocaml_dwarfdump_eh_frame_hdr.out || exit 1"))))

; --eh-frame-hdr comparison (C++ file)

(rule
 (alias runtest)
 (target ocaml_dwarfdump_eh_frame_hdr_cpp.out)
 (deps %{bin:gnu-dwarfdump} hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (run %{bin:gnu-dwarfdump} --eh-frame-hdr hello_world_cpp_linux))))

(rule
 (alias runtest)
 (target system_dwarfdump_eh_frame_hdr_cpp.out)
 (deps hello_world_cpp_linux)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (with-stdout-to
   %{target}
   (system
    "echo '.eh_frame_hdr'; echo; echo 'Reference: hex dump from readelf -x .eh_frame_hdr'; readelf -x .eh_frame_hdr hello_world_cpp_linux 2>/dev/null | tail -n +3 || echo 'No .eh_frame_hdr section found'"))))

(rule
 (alias runtest)
 (deps
  ocaml_dwarfdump_eh_frame_hdr_cpp.out
  system_dwarfdump_eh_frame_hdr_cpp.out)
 (enabled_if
  (and
   (= %{system} "linux")
   (= %{architecture} "amd64")))
 (action
  (progn
   (run
    bash
    -c
    "grep -q '.eh_frame_hdr' ocaml_dwarfdump_eh_frame_hdr_cpp.out || exit 1")
   (run bash -c "test -s ocaml_dwarfdump_eh_frame_hdr_cpp.out || exit 1"))))

; Enhanced CFI tests completed successfully
; ; GNU-DWARFDUMP UNSUPPORTED SECTION TESTS - LINUX
; ; =============================================================================

; (rule
;  (alias runtest)
;  (target test_dwarfdump_abbrev_unsupported.out)
;  (deps %{bin:gnu-dwarfdump} hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-accepted-exit-codes
;    1
;    (with-stdout-to
;     %{target}
;     (with-stderr-to
;      %{target}
;      (run %{bin:gnu-dwarfdump} --debug-abbrev hello_world_linux))))))

; (rule
;  (alias runtest)
;  (target test_dwarfdump_str_unsupported.out)
;  (deps %{bin:gnu-dwarfdump} hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-accepted-exit-codes
;    1
;    (with-stdout-to
;     %{target}
;     (with-stderr-to
;      %{target}
;      (run %{bin:gnu-dwarfdump} --debug-str hello_world_linux))))))

; (rule
;  (alias runtest)
;  (target test_dwarfdump_str_offsets_unsupported.out)
;  (deps %{bin:gnu-dwarfdump} hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-accepted-exit-codes
;    1
;    (with-stdout-to
;     %{target}
;     (with-stderr-to
;      %{target}
;      (run %{bin:gnu-dwarfdump} --debug-str-offsets hello_world_linux))))))

; (rule
;  (alias runtest)
;  (target test_dwarfdump_addr_unsupported.out)
;  (deps %{bin:gnu-dwarfdump} hello_world_linux)
;  (enabled_if
;   (and
;    (= %{system} "linux")
;    (= %{architecture} "amd64")))
;  (action
;   (with-accepted-exit-codes
;    1
;    (with-stdout-to
;     %{target}
;     (with-stderr-to
;      %{target}
;      (run %{bin:gnu-dwarfdump} --debug-addr hello_world_linux))))))
